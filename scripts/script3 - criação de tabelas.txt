CREATE TABLE [scPessoa].[Email](
	id_email INT IDENTITY NOT NULL,
	email VARCHAR(80) NOT NULL,
	observacao VARCHAR(150) NULL,
CONSTRAINT pk_id_email
	PRIMARY KEY (id_email),
CONSTRAINT uq_email
	UNIQUE (email)
)
GO

CREATE TABLE [scPessoa].[Telefone](
	id_telefone INT IDENTITY NOT NULL,
	codigo_pais SMALLINT NOT NULL,
	codigo_area SMALLINT NOT NULL,
	telefone INT NOT NULL,
	observacao VARCHAR(150) NULL,
CONSTRAINT pk_id_telefone
	PRIMARY KEY (id_telefone)
)
GO


CREATE TABLE [scPessoa].[Endereco](
	id_endereco INT IDENTITY NOT NULL,
	pais VARCHAR(60) NOT NULL,
	estado VARCHAR(60) NOT NULL,
	cidade VARCHAR(60) NOT NULL,
	bairro VARCHAR(60) NOT NULL,
	rua VARCHAR(60) NOT NULL,
	numero INT NOT NULL,
	complemento VARCHAR(20) NULL,
	cep INT NOT NULL,
	observacao VARCHAR(150) NULL,
CONSTRAINT pk_id_endereco
	PRIMARY KEY (id_endereco)
)
GO


CREATE TABLE [scFuncionario].[Funcao_Funcionario](
	id_funcao TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(30) NOT NULL,
CONSTRAINT pk_id_funcao
	PRIMARY KEY (id_funcao)
)
GO


CREATE TABLE [scFuncionario].[Deposito_Funcionario](
	id_deposito SMALLINT IDENTITY NOT NULL,
	numero_conta INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	codigo_agencia SMALLINT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	tipo_conta TINYINT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	nome_banco VARCHAR(15) NOT NULL,
CONSTRAINT pk_id_deposito
	PRIMARY KEY (id_deposito)
)
GO


CREATE TABLE [scFuncionario].[Funcionario](
	id_funcionario SMALLINT IDENTITY NOT NULL,
	nome VARCHAR(20) NOT NULL,
	sobrenome VARCHAR(60) NOT NULL,
	dt_nascimento DATE NOT NULL,
	cpf BIGINT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	rg INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	sexo CHAR(1) NOT NULL,
	email VARCHAR(50) MASKED WITH (FUNCTION = 'email()') NOT NULL,
	id_telefone INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	id_endereco INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	tipo_funcao TINYINT NOT NULL,
	conta_deposito SMALLINT MASKED WITH (FUNCTION = 'default()') NOT NULL,
CONSTRAINT pk_id_funcionario
	PRIMARY KEY (id_funcionario),
CONSTRAINT uq_cpf_func
	UNIQUE (cpf),
CONSTRAINT ck_sexo_func
	CHECK (LOWER(sexo) IN ('m', 'f')),
CONSTRAINT fk_id_tel_func
	FOREIGN KEY (id_telefone)
	REFERENCES [scPessoa].[Telefone_Pessoa](id_telefone),
CONSTRAINT fk_id_end_func
	FOREIGN KEY (id_endereco)
	REFERENCES [scPessoa].[Endereco_Pessoa](id_endereco),
CONSTRAINT fk_tipo_funcao
	FOREIGN KEY (tipo_funcao)
	REFERENCES [scFuncionario].[Funcao_Funcionario](id_funcao),
CONSTRAINT fk_conta_deposito
	FOREIGN KEY (conta_deposito)
	REFERENCES [scFuncionario].[Deposito_Funcionario](id_deposito)
)
GO


CREATE TABLE [scHospede].[Tipo_Hospede](
	id_tp_hospede TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(20) NOT NULL,
CONSTRAINT pk_id_tp_hospede
	PRIMARY KEY (id_tp_hospede)
)
GO


CREATE TABLE [scHospede].[Hospede](
	id_hospede INT IDENTITY NOT NULL,
	nome VARCHAR(20) NOT NULL,
	sobrenome VARCHAR(60) NOT NULL,
	dt_nascimento DATE NOT NULL,
	cpf BIGINT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	rg INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	sexo CHAR(1) CHECK(LOWER(sexo) IN ('m', 'f')) NOT NULL,
	email VARCHAR(50) MASKED WITH (FUNCTION = 'email()') NOT NULL,
	id_telefone INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
	id_endereco INT MASKED WITH (FUNCTION = 'default()') NOT NULL,
CONSTRAINT pk_id_hospede
	PRIMARY KEY (id_hospede),
CONSTRAINT uq_cpf_hosp
	UNIQUE (cpf),
CONSTRAINT ck_sexo_hosp
	CHECK (LOWER(sexo) IN ('m', 'f')),
CONSTRAINT fk_id_tel_hosp
	FOREIGN KEY (id_telefone)
	REFERENCES [scPessoa].[Telefone_Pessoa] (id_telefone),
CONSTRAINT fk_id_end_hosp
	FOREIGN KEY (id_endereco)
	REFERENCES [scPessoa].[Endereco_Pessoa] (id_endereco)
)
GO


CREATE TABLE [scEstalagem].[Tipo_Quarto](
	id_tp_quarto TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(20) NOT NULL,
CONSTRAINT pk_id_tp_quarto
	PRIMARY KEY (id_tp_quarto)
)
GO


CREATE TABLE [scEstalagem].[Servico](
	id_servico TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(20) NOT NULL,
	valor FLOAT NOT NULL,
CONSTRAINT pk_id_servico
	PRIMARY KEY (id_servico)
)
GO


CREATE TABLE [scEstalagem].[Quarto](
	id_quarto TINYINT IDENTITY NOT NULL,
	num_andar TINYINT NOT NULL,
	num_camas TINYINT NOT NULL,
	valor_diaria DECIMAL(5, 2) NOT NULL,
	tipo_quarto TINYINT NULL,
	status BIT NOT NULL,
CONSTRAINT pk_id_quarto
	PRIMARY KEY (id_quarto),
CONSTRAINT fk_tipo_quarto
	FOREIGN KEY (tipo_quarto)
	REFERENCES [scEstalagem].[Tipo_Quarto](id_tp_quarto)
	ON DELETE SET NULL
)
GO


CREATE TABLE [scReserva].[Tipo_Pagamento](
	id_tp_pagamento TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(10) NOT NULL,
CONSTRAINT pk_id_tp_pagamento
	PRIMARY KEY (id_tp_pagamento)
)
GO


CREATE TABLE [scReserva].[Tipo_Cancelamento](
	id_tp_cancelamento TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(25) NOT NULL,
CONSTRAINT pk_id_tp_cancelamento
	PRIMARY KEY (id_tp_cancelamento)
)
GO


CREATE TABLE [scReserva].[Tipo_Contato](
	id_tp_contato TINYINT IDENTITY NOT NULL,
	descricao VARCHAR(20) NOT NULL,
CONSTRAINT pk_id_tp_contato
	PRIMARY KEY (id_tp_contato)
)
GO


CREATE TABLE [scReserva].[Reserva](
	id_reserva INT IDENTITY NOT NULL,
	data_checkin DATETIME NOT NULL,
	data_checkout DATETIME NULL,
	funcion_checkin SMALLINT NOT NULL,
	funcion_checkout SMALLINT NULL,
	hospede_principal INT NOT NULL,
	num_hospede TINYINT NOT NULL,
	id_quarto TINYINT NOT NULL,
	tipo_pagamento TINYINT NOT NULL,
	tipo_contato TINYINT NOT NULL,
	valor_total DECIMAL(7, 2) NULL,
	status BIT NOT NULL,
	cancelamento TINYINT NULL,
CONSTRAINT pk_id_reserva
	PRIMARY KEY (id_reserva),
CONSTRAINT fk_funcion_checkin
	FOREIGN KEY (funcion_checkin)
	REFERENCES [scFuncionario].[Funcionario] (id_funcionario),
CONSTRAINT fk_funcion_checkout
	FOREIGN KEY (funcion_checkout)
	REFERENCES [scFuncionario].[Funcionario] (id_funcionario),
CONSTRAINT fk_hospede_principal
	FOREIGN KEY (hospede_principal)
	REFERENCES [scHospede].[Hospede] (id_hospede),
CONSTRAINT ck_num_hospede
	CHECK (num_hospede >= 1),
CONSTRAINT fk_id_quarto
	FOREIGN KEY (id_quarto)
	REFERENCES [scEstalagem].[Quarto] (id_quarto),
CONSTRAINT fk_tp_pagamento
	FOREIGN KEY (tipo_pagamento)
	REFERENCES [scReserva].[Tipo_Pagamento] (id_tp_pagamento),
CONSTRAINT fk_tp_contato
	FOREIGN KEY (tipo_contato)
	REFERENCES [scReserva].[Tipo_Contato] (id_tp_contato),
CONSTRAINT fk_tp_cancelamento
	FOREIGN KEY (cancelamento)
	REFERENCES [scReserva].[Tipo_Cancelamento] (id_tp_cancelamento)
)
GO


CREATE TABLE [scHospede].[Hospede_Classe](
	id_tp_hospede TINYINT NOT NULL,
	id_hospede INT NOT NULL,
CONSTRAINT pk_hospede_tipos
	PRIMARY KEY (id_tp_hospede, id_hospede),
CONSTRAINT fk_tp_hospede
	FOREIGN KEY (id_tp_hospede)
	REFERENCES [scHospede].[Tipo_Hospede] (id_tp_hospede),
CONSTRAINT fk_hospede_1
	FOREIGN KEY (id_hospede)
	REFERENCES [scHospede].[Hospede] (id_hospede)
)
GO


CREATE TABLE [scReserva].[Reserva_Servico](
	id_reserva INT NOT NULL,
	id_servico TINYINT NOT NULL,
	num_solicitacao TINYINT NOT NULL,
CONSTRAINT pk_reserva_servico
	PRIMARY KEY (id_reserva, id_servico),
CONSTRAINT fk_id_reserva_1
	FOREIGN KEY (id_reserva)
	REFERENCES [scReserva].[Reserva] (id_reserva),
CONSTRAINT fk_id_servico
	FOREIGN KEY (id_servico)
	REFERENCES [scFuncionario].[Servico] (id_servico)
)
GO


CREATE TABLE [scHospede].[Estadia](
	id_hospede INT NOT NULL,
	id_reserva INT NOT NULL,
CONSTRAINT pk_hospede_reserva
	PRIMARY KEY (id_hospede, id_reserva),
CONSTRAINT fk_id_hospede_2
	FOREIGN KEY (id_hospede)
	REFERENCES [scHospede].[Hospede] (id_hospede),
CONSTRAINT fk_id_reserva_2
	FOREIGN KEY (id_reserva)
	REFERENCES [scReserva].[Reserva] (id_reserva)
)
GO


CREATE TABLE [scEstalagem].[Avaliacao](
	tipo_contato TINYINT NOT NULL,
	id_reserva INT NOT NULL,
	conforto FLOAT NULL,
	custo_beneficio FLOAT NULL,
	funcionarios FLOAT NULL,
	localizacao FLOAT NULL,
	limpeza FLOAT NULL,
CONSTRAINT pk_reserva_avaliacao
	PRIMARY KEY (tipo_contato, id_reserva),
CONSTRAINT fk_tp_contato
	FOREIGN KEY (tipo_contato)
	REFERENCES [scReserva].[Tipo_Contato] (id_tp_contato),
CONSTRAINT fk_id_reserva_av
	FOREIGN KEY (id_reserva)
	REFERENCES [scReserva].[Reserva] (id_reserva),
CONSTRAINT ck_conforto
	CHECK ((0 <= conforto) AND (conforto <= 10)),
CONSTRAINT ck_custo_beneficio
	CHECK ((0 <= custo_beneficio) AND (custo_beneficio <= 10)),
CONSTRAINT ck_funcionarios
	CHECK ((0 <= funcionarios) AND (funcionarios <= 10)),
CONSTRAINT ck_localizacao
	CHECK ((0 <= localizacao) AND (localizacao <= 10)),
CONSTRAINT ck_limpeza
	CHECK ((0 <= limpeza) AND (limpeza <= 10))
)
GO
