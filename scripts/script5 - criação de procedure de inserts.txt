/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	INSERT scSistema
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*/

CREATE PROCEDURE [scSistema].[procSelect_Error]
AS
BEGIN
	SET NOCOUNT ON

	SELECT ERROR_NUMBER() AS ErrorNumber,
			ERROR_SEVERITY() AS ErrorSeverity,
			ERROR_STATE() AS ErrorState,
			ERROR_PROCEDURE() AS ErrorProcedure,
			ERROR_LINE() AS ErrorLine,
			ERROR_MESSAGE() AS ErrorMessage
END
GO



/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	INSERT scPessoa
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*/

CREATE PROCEDURE [scPessoa].[procInsert_Email]
	@novo_email VARCHAR(100),
	@observacao VARCHAR(255) = NULL,
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Email

	1º passo: cria uma variável para verificar a existencia do @novo_email
	2º passo:
		- verifica se o email é novo
		- verifica se o email é válido
	3º passo: insere o @novo_email na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_email VARCHAR(100) = (SELECT email FROM [scPessoa].[Email] WHERE email = @novo_email);

-- 2º passo
	IF (@select_email IS NOT NULL)
		RAISERROR('Email já cadastrado.', 16, 1);

	ELSE IF (CHARINDEX(' ', @novo_email) > 0)
		RAISERROR('Emails não podem conter espaços.', 16, 1);

	ELSE IF (LEN(@novo_email) < 9)
		RAISERROR('Tamanho do email inválido.', 16, 1);

	ELSE IF (@novo_email NOT LIKE '%[A-Za-z0-9][@][A-Za-z0-9]%[A-Za-z0-9][.][A-Za-z0-9]%')
		RAISERROR('Email inválido.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_email

				INSERT INTO [scPessoa].[Email] (email, observacao)
				VALUES (@novo_email, @observacao);
				
			COMMIT TRAN tran_insert_email
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_email

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY();
END
GO


CREATE PROCEDURE [scPessoa].[procInsert_Telefone]
	@codigo_pais SMALLINT,
	@codigo_area SMALLINT,
	@novo_telefone INT,
	@observacao VARCHAR(255) = NULL,
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Telefone

	1º passo: cria um variável para verificar se o @novo_telefone já foi cadastrado
	2º passo:
		- verifica se o telefone é novo
		- verifica se o telefone é válido
	3º passo: insere o novo telefone na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_telefone INT = (SELECT id_telefone FROM [scPessoa].[Telefone] WHERE (codigo_pais = @codigo_pais) AND (codigo_area = @codigo_area) AND (telefone = @novo_telefone));
	
-- 2º passo
	IF (@select_telefone IS NOT NULL)
		RAISERROR('Telefone já cadastrado.', 16, 1);

	ELSE IF (LEN(@novo_telefone) < 4)
		RAISERROR('Tamanho do telefone é inválido.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_telefone

				INSERT INTO [scPessoa].[Telefone] (codigo_pais, codigo_area, telefone, observacao)
				VALUES (@codigo_pais, @codigo_area, @novo_telefone, @observacao)

			COMMIT TRAN tran_insert_telefone
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_telefone

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY()
END
GO


CREATE PROCEDURE [scPessoa].[procInsert_Endereco]
	@pais VARCHAR(80),
	@estado VARCHAR(80),
	@cidade VARCHAR(80),
	@bairro VARCHAR(80),
	@rua VARCHAR(80),
	@numero INT,
	@complemento VARCHAR(80),
	@cep INT,
	@observacao VARCHAR(255) = NULL,
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Endereço

	1º passo: cria variável para verificar se o endereço já foi cadastrado
	2º passo: verifica se o endereço é novo
	3º passo: insere o endereço na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	SET @retornar_id = (SELECT id_endereco FROM [scPessoa].[Endereco] WHERE (pais = @pais) AND (estado = @estado) AND (cidade = @cidade) AND (bairro = @bairro) AND (rua = @rua) AND (numero = @numero) AND (cep = @cep));

-- 2º passo
	IF (@retornar_id IS NOT NULL)
		RAISERROR('Endereço  já cadastrado.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_endereco

				INSERT INTO [scPessoa].[Endereco] (pais, estado, cidade, bairro, rua, numero, complemento, cep, observacao)
				VALUES (@pais, @estado, @cidade, @bairro, @rua, @numero, @complemento, @cep, @observacao)

			COMMIT TRAN tran_insert_endereco
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_endereco

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY()
END
GO



/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	INSERT scFuncionario
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*/

CREATE PROCEDURE [scFuncionario].[procInsert_Deposito]
	@numero_conta INT,
	@codigo_agencia SMALLINT,
	@tipo_conta TINYINT,
	@nome_banco VARCHAR(50),
	@retornar_id SMALLINT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Depósito

	1º passo: cria uma variável que verifica se á conta depósito já exista
	2º passo:
		- verifica se a conta depósito é nova
		- verifica se os dados são válidos
	3º passo: insere o depósito na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_deposito SMALLINT = (SELECT id_deposito FROM [scFuncionario].[Deposito] WHERE (numero_conta = @numero_conta) AND (codigo_agencia = @codigo_agencia))

-- 2º passo
	IF (@select_deposito IS NOT NULL)
		RAISERROR('Conta de depósito já cadastrado.', 16, 1);

	ELSE IF (LEN(@codigo_agencia) NOT BETWEEN 3 AND 4)
		RAISERROR('Conta de agência é inválido.', 16, 1);

	ELSE IF (LEN(@numero_conta) NOT BETWEEN 3 AND 14)
		RAISERROR('Número de conta inválido.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_deposito

				INSERT INTO [scFuncionario].[Deposito] (numero_conta, codigo_agencia, tipo_conta, nome_banco)
				VALUES (@numero_conta, @codigo_agencia, @tipo_conta, @nome_banco)

			COMMIT TRAN tran_insert_deposito
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_deposito

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY();
END
GO


CREATE PROCEDURE [scFuncionario].[procInsert_ContaSistema]
	@nome_funcionario VARCHAR(50),
	@sobrenome_funcionario VARCHAR(100),
	@id_funcionario INT
AS
BEGIN
	/*
	Inserção de uma nova Conta

	1º passo: cria um novo nome de usuário
	2º passo:
		- insere o usuário na tabela com uma senha temporária
		- atualizaos dados do fucionário com a conta nova
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @create_conta VARCHAR(25) = (CONCAT(SUBSTRING(REPLACE(@nome_funcionario, ' ', ''), 1, 5),
										'.',
										SUBSTRING(REPLACE(@sobrenome_funcionario, ' ', ''), 1, 5),
										@id_funcionario))

-- 2º passo
	BEGIN TRY
		BEGIN TRAN tran_insert_conta

			INSERT INTO [scFuncionario].[ContaSistema] (usuario, senha)
			VALUES (@create_conta, '12341234')

			UPDATE [scFuncionario].[Funcionario]
			SET conta_id = SCOPE_IDENTITY()
			WHERE id_funcionario = @id_funcionario

		COMMIT TRAN tran_insert_conta
	END TRY
	
	BEGIN CATCH
		ROLLBACK TRAN tran_insert_conta

		EXEC [scSistema].[procSelect_Error]

		RETURN
	END CATCH
END
GO


CREATE PROCEDURE [scFuncionario].[procInsert_ContratoFuncionario]
	@id_funcionario SMALLINT,
	@nome_funcionario VARCHAR(50),
	@sobrenome_funcionario VARCHAR(100),
	@dt_admissao DATE,
	@id_cargo TINYINT,
	@salario SMALLINT,
	@vl_alim SMALLINT,
	@vl_trns SMALLINT
AS
BEGIN
	/*
	Inserção de um novo Contrato
	
	1º passo: cria variáveis para verificar a existência do funcionário e se ele já tem um contrato
	2º passo:
		- verifica se o funcionário existe
		- verifica se o funcionário já tem um contrato
	3º passo: 
		- insere o novo contrato na tabela
		- caso o funcionário possua um cargo que usará o sistema da empresa, é criado uma conta para ele
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_funcionario SMALLINT = (SELECT id_funcionario FROM [scFuncionario].[Funcionario] WHERE id_funcionario = @id_funcionario),
			@select_contrato SMALLINT = (SELECT funcionario_id FROM [scFuncionario].[Contrato] WHERE funcionario_id = @id_funcionario)

-- 2º passo	
	IF (@select_funcionario IS NULL)
		RAISERROR('Funcionário não existe.', 16, 1);

	ELSE IF (@select_contrato IS NOT NULL)
		RAISERROR('Funcionário já possui um contrato.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_contrato

				INSERT INTO [scFuncionario].[Contrato] (funcionario_id, dt_admissao, cargo_id, salario, vale_alimentacao, vale_transporte)
				VALUES (@id_funcionario, @dt_admissao, @id_cargo, @salario, @vl_alim, @vl_trns)

				IF (@id_cargo NOT IN (16, 20, 21, 22, 24))
					EXEC [scFuncionario].[procInsert_ContaSistema] @nome_funcionario, @sobrenome_funcionario, @id_funcionario

			COMMIT TRAN tran_insert_contrato
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_contrato

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH
END
GO


CREATE PROCEDURE [scFuncionario].[procInsert_Funcionario]
	@novo_nome VARCHAR(50),
	@novo_sobrenome VARCHAR(100),
	@novo_dt_nascimento DATE,
	@novo_cpf BIGINT,
	@novo_rg INT,
	@novo_sexo CHAR(1),
	@novo_email INT,
	@novo_telefone INT,
	@contato_emergencia INT,
	@novo_endereco INT,
	@novo_deposito SMALLINT,
	@observacao VARCHAR(255),
	@retornar_id SMALLINT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Funcionário
	
	1º passo: cria variáveis que verificam se os dados do funcionários já estão atrelados a outros
	2º passo:
		- verifica se os dados são novos
		- verifica se realmente foram inseridos todos os dados
		- verifica se a idade e o sexo são válidos
	3º passo: insere o novo funionário na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_cpf BIGINT = (SELECT cpf FROM [scFuncionario].[Funcionario] WHERE cpf = @novo_cpf),
			@select_email INT = (SELECT email_id FROM [scFuncionario].[Funcionario] WHERE email_id = @novo_email),
			@select_telefone INT = (SELECT telefone_id FROM [scFuncionario].[Funcionario] WHERE telefone_id = @novo_telefone),
			@select_deposito SMALLINT = (SELECT deposito_id FROM [scFuncionario].[Funcionario] WHERE deposito_id = @novo_deposito)

-- 2º passo
	IF (@select_cpf IS NOT NULL)
		RAISERROR('Cpf já cadastrado para outro funcionário.', 16, 1);

	ELSE IF (@select_email IS NOT NULL) 
		RAISERROR('Email já cadastrado para outro funcionário.', 16, 1);

	ELSE IF (@select_telefone IS NOT NULL)
		RAISERROR('Telefone já cadastrado para outro funcionário.', 16, 1);

	ELSE IF (@select_deposito IS NOT NULL)
		RAISERROR('Deposito já cadastrado para outro funcionário.', 16, 1);

	ELSE IF (@novo_cpf IS NULL) OR (@novo_email IS NULL) OR (@novo_telefone IS NULL) OR (@novo_deposito IS NULL)
		RAISERROR('Dados essenciais estão faltando.', 16, 1);

	ELSE IF (DATEDIFF(YEAR, @novo_dt_nascimento, GETDATE()) < 14)
		RAISERROR('A pessoa é jovem de mais para ser funcionária da empresa.', 16, 1);

	ELSE IF (LOWER(@novo_sexo) NOT IN ('m', 'f'))
		RAISERROR('Sexo informado não é válido.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_funcionario

				INSERT INTO [scFuncionario].[Funcionario] (nome, sobrenome, dt_nascimento, cpf, rg, sexo, email_id, telefone_id,
															contato_emergencia, endereco_id, deposito_id, status_id, observacao)
				VALUES (@novo_nome, @novo_sobrenome, @novo_dt_nascimento, @novo_cpf, @novo_rg, @novo_sexo, @novo_email, @novo_telefone,
						@contato_emergencia, @novo_endereco, @novo_deposito, 1, @observacao)
						
			COMMIT TRAN tran_insert_funcionario
		END TRY
		BEGIN CATCH
			ROLLBACK TRAN tran_insert_funcionario

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY()
END
GO



/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	INSERT scHospede
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*/

CREATE PROCEDURE [scHospede].[procInsert_HospedeResponsavel]
	@novo_nome VARCHAR(50),
	@novo_sobrenome VARCHAR(100),
	@novo_dt_nascimento DATE,
	@novo_cpf BIGINT,
	@novo_rg INT,
	@novo_sexo CHAR(1),
	@novo_email INT,
	@novo_telefone INT,
	@novo_endereco INT,
	@id_categoria TINYINT,
	@observacao VARCHAR(255),
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Hospede Responsável

	1º passo: cria variáveis que verificam se os dados informados são novos e válidos
	2º passo: 
		- verifica se o cpf e os dados de contato são novos
		- verifica se a categoria de hóspede é válida
		- verifica se os dados essenciais foram preenchidos
	3º passo: insere o novo hóspede na tabela
	*/
	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_cpf BIGINT = (SELECT cpf FROM [scHospede].[Hospede] WHERE cpf = @novo_cpf),
			@select_email INT = (SELECT email_id FROM [scHospede].[Hospede] WHERE email_id = @novo_email),
			@select_telefone INT = (SELECT telefone_id FROM [scHospede].[Hospede] WHERE telefone_id = @novo_telefone),
			@select_categoria TINYINT = (SELECT id_categoria FROM [scHospede].[Categoria] WHERE id_categoria = @id_categoria)

-- 2º passo
	IF (@select_cpf IS NOT NULL)
		RAISERROR('Cpf já cadastrado para outro hóspede.', 16, 1);
	
	ELSE IF (@select_email IS NOT NULL)
		RAISERROR('Email já cadastrado para outro hóspede.', 16, 1);
	
	ELSE IF (@select_telefone IS NOT NULL)
		RAISERROR('Telefone já cadastrado para outro hóspede.', 16, 1);
	
	ELSE IF (@select_categoria IS NULL)
		RAISERROR('A categoria informada é inválida.', 16, 1);
	
	ELSE IF (DATEDIFF(YEAR, @novo_dt_nascimento, GETDATE()) < 18)
		RAISERROR('Menores de idade não podem ser responáveis por uma reserva.', 16, 1);
	
	ELSE IF (LOWER(@novo_sexo) NOT IN ('m', 'f'))
		RAISERROR('Sexo informado não é válido.', 16, 1);
	
	ELSE IF (@novo_nome IS NULL) OR
			(@novo_sobrenome IS NULL) OR
			(@novo_dt_nascimento IS NULL) OR
			(@novo_cpf IS NULL) OR
			(@novo_rg IS NULL) OR
			(@novo_sexo IS NULL) OR
			(@novo_email IS NULL) OR
			(@novo_telefone IS NULL) OR
			(@novo_endereco IS NULL) OR
			(@select_categoria IS NULL)
		RAISERROR('Todas as informações são obrigatórias.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_hospede

				INSERT INTO [scHospede].[Hospede] (nome, sobrenome, dt_nascimento, cpf, rg, sexo, email_id, telefone_id, endereco_id, categoria_id, observacao)
				VALUES (@novo_nome, @novo_sobrenome, @novo_dt_nascimento, @novo_cpf, @novo_rg, @novo_sexo, @novo_email, @novo_telefone, @novo_endereco, @id_categoria, @observacao)

			COMMIT TRAN tran_insert_hospede
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_hospede

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

	SET @retornar_id = SCOPE_IDENTITY()
END
GO


CREATE PROCEDURE [scHospede].[procInsert_HospedeDependente]
	@id_responsavel INT,
	@novo_nome VARCHAR(50),
	@novo_sobrenome VARCHAR(100),
	@novo_dt_nascimento DATE,
	@novo_cpf BIGINT,
	@novo_rg INT,
	@novo_sexo CHAR(1),
	@observacao VARCHAR(255),
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de um novo Hóspede Dependente

	1º passo: cria variáveis que verificam se os dados são válidos
	2º passo:
		- verifica se o hóspede responsável existe
		- verifica se o hóspede dependente já foi cadastrado
		- verifica se os dados informados são válidos
	3º passo: insere o novo hóspede na tabela
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_responsavel INT = (SELECT id_hospede FROM [scHospede].[Hospede] WHERE (id_hospede = @id_responsavel) AND (responsavel_id IS NULL) AND (cpf IS NOT NULL)),
			@select_cpf INT = (SELECT id_hospede FROM [scHospede].[Hospede] WHERE (cpf = @novo_cpf) AND (cpf IS NOT NULL)),
			@select_dependente INT = (SELECT id_hospede FROM [scHospede].[Hospede] WHERE (responsavel_id = @id_responsavel) AND (nome = @novo_nome) AND (sobrenome = @novo_sobrenome))

-- 2º passo
	IF (@select_responsavel IS NULL)
		RAISERROR('O hóspede não existe ou não informou seu cpf.', 16, 1);

	ELSE IF (@select_cpf IS NOT NULL)
		RAISERROR('Cpf já atribuído a outro hóspede.', 16, 1);

	ELSE IF (@select_dependente IS NOT NULL)
		RAISERROR('Hóspede dependente já cadastrado.', 16, 1);

	ELSE IF (LOWER(@novo_sexo) NOT IN ('m', 'f'))
		RAISERROR('Sexo informado não é válido.', 16, 1);

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_dependente

				INSERT INTO [scHospede].[Hospede] (nome, sobrenome, dt_nascimento, cpf, rg, sexo, responsavel_id, observacao)
				VALUES (@novo_nome, @novo_sobrenome, @novo_dt_nascimento, @novo_cpf, @novo_rg, @novo_sexo, @id_responsavel, @observacao)

			COMMIT TRAN tran_insert_dependente
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_dependente

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY()
END
GO



/*= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	INSERT scEstadia
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =*/

CREATE PROCEDURE [scEstadia].[procInsert_Reserva]
	@data_checkin DATETIME,
	@id_funcion_checkin SMALLINT,
	@id_hospede INT,
	@num_hospede TINYINT,
	@id_quarto TINYINT,
	@id_contato TINYINT,
	@retornar_id INT OUTPUT
AS
BEGIN
	/*
	Inserção de uma nova Reserva

	1º passo: cria variáveis que verificam se os dados são válidos
	2º passo:
		- verifica se a reserva já exista
		- verifica se o funcionário existe ou se tem permissão de fazer a reserva
		- verifica se o hóspede existe ou tem permissão para se instalar
		- verifica se o quarto existe e se está disponível
		- verifica se o formato de contato é válido
	3º passo:
		- insere a nova reserva na tabela
		- atualiza o status do quarto, alegando que ele está ocupado
	*/
	
	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_row INT = (SELECT id_reserva FROM [scEstadia].[Reserva] WHERE (hospede_responsavel = @id_hospede) AND (data_checkin = @data_checkin) AND (quarto_id = @id_quarto)),
			@select_cargo TINYINT = (SELECT cargo_id FROM [scFuncionario].[Contrato] WHERE (funcionario_id = @id_funcion_checkin)),
			@select_hospede INT = (SELECT id_hospede FROM [scHospede].[Hospede] WHERE (id_hospede = @id_hospede) AND (cpf IS NOT NULL) AND (responsavel_id IS NULL)),
			@select_restricao INT = (SELECT hospede_retido FROM [scHospede].[Hospede] WHERE (id_hospede = @id_hospede)),
			@select_quarto TINYINT = (SELECT status FROM [scGestao].[Quarto] WHERE (id_quarto = @id_quarto)),
			@select_contato TINYINT = (SELECT id_contato FROM [scOperacao].[Contato] WHERE (id_contato = @id_contato))

-- 2º passo	
	IF (@select_row IS NOT NULL)
		RAISERROR('A reserva já foi realizada.', 16, 1)

	ELSE IF (@select_cargo IS NULL)
		RAISERROR('O funcionário não existe.', 16, 1)

	ELSE IF (@select_cargo NOT IN (1, 13, 14))
		RAISERROR('O funcionário não possui autorização para fazer o cadastro.', 16, 1)

	ELSE IF (@select_hospede IS NULL)
		RAISERROR('O hóspede não existe ou não pode ser responsável pela reserva.', 16, 1)

	ELSE IF (@select_restricao = 1)
		RAISERROR('O hóspede está retido e não pode se instalar no Resort.', 16, 1)

	ELSE IF (@num_hospede < 1)
		RAISERROR('A reserva deve ter pelo menos 1 hóspede.', 16, 1)

	ELSE IF (@select_quarto IS NULL)
		RAISERROR('O quarto não existe.', 16, 1)

	ELSE IF (@select_quarto = 1)
		RAISERROR('O quarto já está reservado.', 16, 1)

	ELSE IF (@select_contato IS NULL)
		RAISERROR('O tipo de contato não existe.', 16, 1)

-- 3º passo
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_reserva

				INSERT INTO [scEstadia].[Reserva] (data_checkin, funcion_checkin, hospede_responsavel, num_hospede, quarto_id, contato_id, status)
				VALUES (@data_checkin, @id_funcion_checkin, @id_hospede, @num_hospede, @id_quarto, @id_contato, 1)

				UPDATE [scGestao].[Quarto]
				SET status = 1
				WHERE id_quarto = @id_quarto

			COMMIT TRAN tran_insert_reserva
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_reserva

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH

		SET @retornar_id = SCOPE_IDENTITY()
END
GO


CREATE PROCEDURE [scEstadia].[procInsert_ReservaBar]
	@id_reserva INT,
	@id_produto TINYINT,
	@num_pedidos TINYINT
AS
BEGIN
	/*
	Ligação entre Reserva e Pedidos do bar

	1º passo: cria variáveis que verificam se os dados são válidos
	2º passo:
		- verifica se a reserva e o produto existem
		- verifica se a quantidade de produtos pedidos é superior a zero
	3º passo:
		- caso a reserva já tenha feito o mesmo pedido, atualiza a tabela
		- caso contrário, insere os novos valores
	4º passo: insere os valores na Nota Fiscal
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_reserva INT = (SELECT id_reserva FROM [scEstadia].[Reserva] WHERE (id_reserva = @id_reserva)),
			@select_produto VARCHAR(50) = (SELECT LOWER(descricao) FROM [scGestao].[Cardapio] WHERE (id_produto = @id_produto)),
			@select_valor DECIMAL(5, 2) = (SELECT valor FROM [scGestao].[Cardapio] WHERE (id_produto = @id_produto)),
			@select_row INT = (SELECT num_pedidos FROM [scEstadia].[ReservaBar] WHERE (id_reserva = @id_reserva) AND (id_produto = @id_produto))

-- 2º passo
	IF (@num_pedidos < 1)
		RAISERROR('Quantidade inválida. Min 1.', 16, 1)

	ELSE IF (@select_reserva IS NULL)
		RAISERROR('A reserva não existe.', 16, 1)

	ELSE IF (@select_produto IS NULL)
		RAISERROR('O produto não existe.', 16, 1)

-- 3º passo	
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_reservabar
			
				IF (@select_row IS NOT NULL)
					UPDATE [scEstadia].[ReservaBar]
					SET num_pedidos = (@select_row + @num_pedidos)
					WHERE (id_reserva = @id_reserva) AND (id_produto = @id_produto)

				ELSE
					INSERT INTO [scEstadia].[ReservaBar]
					VALUES (@id_reserva, @id_produto, @num_pedidos)

-- 4º passo
				INSERT INTO [scEstadia].[NotaFiscal] (reserva_id, item, valor, data)
				VALUES (@id_reserva, CONCAT(@num_pedidos, ' x - ',  @select_produto), (@select_valor * @num_pedidos), GETDATE())
			
			COMMIT TRAN tran_insert_reservabar
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_reservabar

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH
END
GO


CREATE PROCEDURE [scEstadia].[procInsert_ReservaServico]
	@id_reserva INT,
	@id_servico TINYINT,
	@num_solicitacao TINYINT,
	@id_funcionario SMALLINT
AS
BEGIN
	/*
	Ligação entre Reserva e Pedidos do servico

	1º passo: cria variáveis que verificam se os dados são válidos
	2º passo:
		- verifica se a reserva e o serviço existem
		- verifica se a solicitação de serviços pedidos é superior a zero
		- verifica se o funcionário existe e tem permissão (caso o serviço exija um funcionário)
	3º passo: insere o novo serviço na associativa
	4º passo: insere os valores na Nota Fiscal
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_reserva INT = (SELECT id_reserva FROM [scEstadia].[Reserva] WHERE (id_reserva = @id_reserva)),
			@select_servico VARCHAR(50) = (SELECT LOWER(descricao) FROM [scGestao].[Servico] WHERE (id_servico = @id_servico)),
			@select_valor DECIMAL(5, 2) = (SELECT valor FROM [scGestao].[Servico] WHERE (id_servico = @id_servico)),
			@select_cargo TINYINT = (SELECT cargo_id FROM [scGestao].[Servico] WHERE (id_servico = @id_servico)),
			@select_funcionario TINYINT = (SELECT cargo_id FROM [scFuncionario].[Contrato] WHERE (funcionario_id = @id_funcionario))

-- 2º passo
	IF (@num_solicitacao < 1)
		RAISERROR('Quantidade inválida. Min 1.', 16, 1)

	ELSE IF (@select_reserva IS NULL)
		RAISERROR('A reserva não existe.', 16, 1)

	ELSE IF (@select_servico IS NULL)
		RAISERROR('O serviço não existe.', 16, 1)

	ELSE IF (@select_funcionario IS NULL) AND (@id_funcionario IS NOT NULL)
		RAISERROR('Funcionário não encontrado.', 16, 1)

	ELSE IF (@select_funcionario <> @select_cargo) AND (@select_cargo IS NOT NULL)
		RAISERROR('Funcionário não possui permissão para realizar a atividade.', 16, 1)

-- 3º passo	
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_reservaservico
			
				INSERT INTO [scEstadia].[ReservaServico] (id_reserva, id_servico, num_solicitacao, funcionario_id, dt_solicitacao)
				VALUES (@id_reserva, @id_servico, @num_solicitacao, @id_funcionario, GETDATE())

-- 4º passo
				INSERT INTO [scEstadia].[NotaFiscal] (reserva_id, item, valor, data)
				VALUES (@id_reserva, CONCAT(@num_solicitacao, ' x - ',  @select_servico), (@select_valor * @num_solicitacao), GETDATE())
			
			COMMIT TRAN tran_insert_reservaservico
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_reservaservico

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH
END
GO


CREATE PROCEDURE [scEstadia].[procInsert_ReservaDespesa]
	@id_reserva INT,
	@despesa VARCHAR(255),
	@valor DECIMAL(7, 2)
AS
BEGIN
	/*
	Inserção de uma nova Despesa

	1º passo: cria variáveis que verificam se os dados são válidos
	2º passo:
		- verifica se a reserva existe
		- verifica se a descrição da despesa não é muito curta
		- verifica se o valor da multa é superior a zero
	3º passo: insere a nova despesa na tabela
	4º passo: insere os valores na Nota Fiscal
	*/

	SET NOCOUNT ON

-- 1º passo
	DECLARE @select_reserva INT = (SELECT status FROM [scEstadia].[Reserva] WHERE (id_reserva = @id_reserva)),
			@select_row INT = (SELECT id_despesa FROM [scEstadia].[Despesa] WHERE (reserva_id = @id_reserva) AND (LOWER(despesa) = LOWER(@despesa)))

-- 2º passo
	IF (@valor <= 0)
		RAISERROR('O valor da despesa deve ser maior que zero.', 16, 1)

	ELSE IF (@select_row IS NOT NULL)
		RAISERROR('A despesa já foi registrada.', 16, 1)

	ELSE IF (@select_reserva IS NULL)
		RAISERROR('A reserva não existe.', 16, 1)

	ELSE IF (@select_reserva = 0)
		RAISERROR('A reserva já foi encerrada.', 16, 1)

	ELSE IF (LEN(@despesa) < 10)
		RAISERROR('Descrição de despesa muito curta.', 16, 1)

-- 3º passo	
	ELSE
		BEGIN TRY
			BEGIN TRAN tran_insert_reservadespesa
			
				INSERT INTO [scEstadia].[Despesa] (reserva_id, despesa, data, valor)
				VALUES (@id_reserva, @despesa, GETDATE(), @valor)

-- 4º passo
				INSERT INTO [scEstadia].[NotaFiscal] (reserva_id, item, valor, data)
				VALUES (@id_reserva, CONCAT('Despesa nº ', SCOPE_IDENTITY()), @valor, GETDATE())
			
			COMMIT TRAN tran_insert_reservadespesa
		END TRY

		BEGIN CATCH
			ROLLBACK TRAN tran_insert_reservadespesa

			EXEC [scSistema].[procSelect_Error]

			RETURN
		END CATCH
END
GO